# main.py
import logging
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup 
from telegram.ext import CallbackQueryHandler 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
from handlers_common import start, help_command
from handlers_provider import (
    register_provider, add_service, my_services, 
    add_slot, my_slots, cancel_booking_provider
)
from handlers_client import list_available_services, my_bookings_client
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py
from config import BOT_TOKEN
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏ —Å–∞–º–∏ –º–æ–¥–µ–ª–∏ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
from sqlalchemy.orm import Session
from database import SessionLocal, engine, Provider, Service, TimeSlot, Booking, create_db_tables, get_db
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±–µ–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"

    callback_data = query.data
    user_telegram_id = query.from_user.id
    db: Session = next(get_db())

    try:
        if callback_data.startswith("view_slots_"):
            service_id = int(callback_data.split("_")[2]) # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Å–ª—É–≥–∏
            
            service_info = db.query(Service).filter(Service.service_id == service_id).first()
            if not service_info:
                await query.edit_message_text(text="–û—à–∏–±–∫–∞: –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.") # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                return

            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∏ is_available=True)
            now = datetime.now()
            available_slots = db.query(TimeSlot).filter(
                TimeSlot.service_id == service_id,
                TimeSlot.is_available == True,
                TimeSlot.start_time > now # –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–ª–æ—Ç—ã
            ).order_by(TimeSlot.start_time).limit(10).all() # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ 10 —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ—Ç–æ–º)

            if not available_slots:
                await query.edit_message_text(
                    text=f"–î–ª—è —É—Å–ª—É–≥–∏ '<b>{service_info.name}</b>' —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
                         f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É.",
                    parse_mode=ParseMode.HTML
                )
                return

            slots_keyboard = []
            slots_text = f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è '{service_info.name}':</b>\n\n"
            
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã", —Ç–æ —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è edit_message_text
            
            for slot in available_slots:
                slots_text += f"üóìÔ∏è {slot.start_time.strftime('%Y-%m-%d %H:%M')} - {slot.end_time.strftime('%H:%M')}\n"
                slots_keyboard.append([
                    InlineKeyboardButton(
                        f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ {slot.start_time.strftime('%H:%M %d.%m')}",
                        callback_data=f"book_slot_{slot.slot_id}" # –ù–æ–≤—ã–π callback_data –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥" (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # slots_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services")])
            # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞—Ç—å /services —Å–Ω–æ–≤–∞

            reply_markup_slots = InlineKeyboardMarkup(slots_keyboard)
            await query.edit_message_text(text=slots_text, reply_markup=reply_markup_slots, parse_mode=ParseMode.HTML)
            logger.info(f"User {user_telegram_id} viewed slots for service {service_id}")
        
        elif callback_data.startswith("book_slot_"):
            slot_id_to_book = int(callback_data.split("_")[2])
            
            # --- –õ–û–ì–ò–ö–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
            slot_to_book = db.query(TimeSlot).filter(
                TimeSlot.slot_id == slot_id_to_book,
                TimeSlot.is_available == True, # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ª–æ—Ç –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                TimeSlot.start_time > datetime.now() # –ò —á—Ç–æ –æ–Ω –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            ).first()

            if not slot_to_book:
                await query.edit_message_text(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
                # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –∏–ª–∏ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è (–¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
            # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –¥–ª—è MVP –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –≤–∞–∂–Ω–∞.
            # existing_client_booking_at_time = db.query(Booking).join(TimeSlot)\
            # .filter(Booking.client_telegram_id == user_telegram_id,
            # TimeSlot.start_time < slot_to_book.end_time,
            # TimeSlot.end_time > slot_to_book.start_time,
            # Booking.status == 'confirmed' # –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            # ).first()
            # if existing_client_booking_at_time:
            # await query.edit_message_text(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            # return


            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            new_booking = Booking(
                slot_id=slot_to_book.slot_id,
                client_telegram_id=user_telegram_id,
                status="confirmed" # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'confirmed'
            )
            slot_to_book.is_available = False # –î–µ–ª–∞–µ–º —Å–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º

            db.add(new_booking)
            db.add(slot_to_book) # SQLAlchemy –æ—Ç—Å–ª–µ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ slot_to_book
            db.commit()
            db.refresh(new_booking)
            # db.refresh(slot_to_book) # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø–æ–ª—è –Ω–∏–∂–µ

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            service_booked = slot_to_book.service # –ß–µ—Ä–µ–∑ relationship
            provider_of_service = service_booked.provider # –ß–µ—Ä–µ–∑ relationship

            confirmation_text = (
                f"üéâ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —É—Å–ª—É–≥—É!</b> üéâ\n\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {service_booked.name}\n"
                f"<b>–ú–∞—Å—Ç–µ—Ä/–ö–æ–º–ø–∞–Ω–∏—è:</b> {provider_of_service.name}\n"
                f"<b>–í—Ä–µ–º—è:</b> {slot_to_book.start_time.strftime('%Y-%m-%d %H:%M')}\n"
                f"<b>ID –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> <code>{new_booking.booking_id}</code> (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ)\n\n"
                f"–ú—ã —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ª—É–≥."
            )
            await query.edit_message_text(text=confirmation_text, parse_mode=ParseMode.HTML)
            logger.info(f"User {user_telegram_id} booked slot {slot_id_to_book} for service {service_booked.service_id}. Booking ID: {new_booking.booking_id}")

            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ü–æ—Å—Ç–∞–≤—â–∏–∫—É ---
            provider_telegram_id = provider_of_service.telegram_id
            try:
                await context.bot.send_message(
                    chat_id=provider_telegram_id,
                    text=f"üîî <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</b> üîî\n\n"
                         f"<b>–£—Å–ª—É–≥–∞:</b> {service_booked.name}\n"
                         f"<b>–í—Ä–µ–º—è:</b> {slot_to_book.start_time.strftime('%Y-%m-%d %H:%M')}\n"
                         f"<b>–ö–ª–∏–µ–Ω—Ç Telegram ID:</b> <code>{user_telegram_id}</code>\n"
                         f"<b>ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> <code>{new_booking.booking_id}</code>",
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"Notification sent to provider {provider_telegram_id} for booking {new_booking.booking_id}")
            except Exception as e_notify:
                logger.error(f"Failed to send notification to provider {provider_telegram_id} for booking {new_booking.booking_id}: {e_notify}")
                # –û—à–∏–±–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º

        # elif callback_data == "back_to_services":
        # # –ù—É–∂–Ω–æ –ª–∏–±–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞—Ç—å list_available_services, –ª–∏–±–æ –∫–∞–∫-—Ç–æ "–æ—Ç–∫–∞—Ç–∏—Ç—å" —Å–æ–æ–±—â–µ–Ω–∏–µ
        # # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /services
        # await query.message.reply_text("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —É—Å–ª—É–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /services")
        # await query.delete_message() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ª–æ—Ç–æ–≤

        elif callback_data.startswith("cancel_booking_client_"):
            booking_id_to_cancel = int(callback_data.split("_")[3]) 

            booking_to_cancel = db.query(Booking).filter(
                Booking.booking_id == booking_id_to_cancel,
                Booking.client_telegram_id == user_telegram_id,
                # Booking.status == "confirmed" # –£–∂–µ –Ω–µ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –º—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
            ).first()

            if not booking_to_cancel:
                await query.edit_message_text(text="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å.")
                return
            
            slot_to_free = booking_to_cancel.slot
            service_name_for_message = slot_to_free.service.name
            slot_time_for_message = slot_to_free.start_time.strftime('%Y-%m-%d %H:%M')
            provider_telegram_id_for_notify = slot_to_free.service.provider.telegram_id


            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
            slot_to_free.is_available = True
            db.add(slot_to_free) # –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π

            # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            db.delete(booking_to_cancel) 
            db.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await query.edit_message_text(
                text=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID <code>{booking_id_to_cancel}</code> –Ω–∞ —É—Å–ª—É–≥—É "
                     f"<b>{service_name_for_message}</b> ({slot_time_for_message}) "
                     f"—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode=ParseMode.HTML
            )
            logger.info(f"Client {user_telegram_id} cancelled and deleted booking {booking_id_to_cancel}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            try:
                await context.bot.send_message(
                    chat_id=provider_telegram_id_for_notify,
                    text=f"‚ÑπÔ∏è <b>–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º</b> ‚ÑπÔ∏è\n\n"
                         f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID <code>{booking_id_to_cancel}</code> –Ω–∞ —É—Å–ª—É–≥—É "
                         f"<b>{service_name_for_message}</b>\n"
                         f"–í—Ä–µ–º—è: {slot_time_for_message}\n"
                         f"–±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º (TG ID: <code>{user_telegram_id}</code>). –°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e_notify:
                logger.error(f"Failed to send cancellation notification to provider {provider_telegram_id_for_notify} for booking {booking_id_to_cancel}: {e_notify}")
               
        else:
            await query.edit_message_text(text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±–µ–∫: {callback_data}")
            logger.warning(f"Received unknown callback_data: {callback_data} from user {user_telegram_id}")

    except Exception as e:
        logger.error(f"Error in button_callback_handler (callback_data: {query.data if query else 'N/A'}) for user {user_telegram_id if query else 'N/A'}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ edit_message_text –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        except Exception as e_edit_fallback:
             logger.error(f"Fallback edit_message_text also failed: {e_edit_fallback}")
             # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å context.bot.send_message, –µ—Å–ª–∏ –µ—Å—Ç—å query.message.chat_id
             if query and query.message:
                 await context.bot.send_message(chat_id=query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        # ...
        pass
    finally:
        db.close()


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    create_db_tables()
    logger.info("Database tables checked/created.")

    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –ö–æ–º–∞–Ω–¥—ã –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞
    application.add_handler(CommandHandler("register_provider", register_provider))
    application.add_handler(CommandHandler("add_service", add_service))
    application.add_handler(CommandHandler("my_services", my_services))
    application.add_handler(CommandHandler("add_slot", add_slot))
    application.add_handler(CommandHandler("my_slots", my_slots))
    application.add_handler(CommandHandler("cancel_booking_provider", cancel_booking_provider))

    # –ö–æ–º–∞–Ω–¥—ã –ö–ª–∏–µ–Ω—Ç–∞
    application.add_handler(CommandHandler("services", list_available_services))
    application.add_handler(CommandHandler("my_bookings", my_bookings_client))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±–µ–∫–æ–≤
    application.add_handler(CallbackQueryHandler(button_callback_handler))

    logger.info("Bot is starting...")
    application.run_polling()
    logger.info("Bot has stopped.")

if __name__ == "__main__":
    main()