# handlers_client.py
import logging
from datetime import datetime
from sqlalchemy.orm import Session
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup 
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from database import get_db, Provider, Service, TimeSlot, Booking

logger = logging.getLogger(__name__)

async def list_available_services(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ—Ç–æ–≤."""
    db: Session = next(get_db())
    user = update.effective_user # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤,
        # —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –±—É–¥—É—â–µ–º
        # –≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Ä–∞–∑–æ–±—å–µ–º –µ–≥–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏–º –¥–ª—è MVP
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ—Å—Ç–æ–π - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        # active_services_query = db.query(Service).join(Provider).filter(
        #     Provider.is_active == True,
        #     # Service.is_deleted == False # –µ—Å–ª–∏ –±—ã –±—ã–ª–æ –ø–æ–ª–µ is_deleted —É —É—Å–ª—É–≥–∏
        # )
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - —Ç–æ–ª—å–∫–æ —Ç–µ —É—Å–ª—É–≥–∏, –≥–¥–µ –ï–°–¢–¨ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –±—É–¥—É—â–µ–º
        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–∏—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏.
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∫–ª–∞–¥–Ω–æ, –µ—Å–ª–∏ —É—Å–ª—É–≥ –º–Ω–æ–≥–æ.
        # –ü–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—â–µ: –ø–æ–∫–∞–∂–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏, –∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ—Ç–æ–≤ - –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.

        # –î–ª—è MVP: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
        # –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.
        # –ò —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ü–∏–∫–ª–µ
        services_with_providers = db.query(Service, Provider.name.label("provider_name"))\
            .join(Provider, Service.provider_id == Provider.provider_id)\
            .filter(Provider.is_active == True)\
            .order_by(Provider.name, Service.name)\
            .all()

        if not services_with_providers:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        response_text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        keyboard = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫

        
        if len(services_with_providers) > 30: # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            await update.message.reply_text(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ) "
                "–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è." # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            )
            logger.warning(f"Too many services ({len(services_with_providers)}) to display without pagination for /services command.")
            return

        for service, provider_name_tuple in services_with_providers:
            provider_name = provider_name_tuple # —Ç.–∫. provider_name.label("provider_name") –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É

            price_str = f"{service.price:.2f} —Ä—É–±." if service.price is not None and service.price > 0 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            response_text += (
                f"<b>–£—Å–ª—É–≥–∞:</b> {service.name}\n"
                f"<i>–û—Ç:</i> {provider_name}\n"
                f"<i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {service.duration_minutes} –º–∏–Ω.\n"
                f"<i>–¶–µ–Ω–∞:</i> {price_str}\n"
            )
            keyboard.append([
                InlineKeyboardButton(
                    f"‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è: {service.name} (–æ—Ç {provider_name})", 
                    callback_data=f"view_slots_{service.service_id}"
                )
            ])
            response_text += "--------------------\n"
            
        # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞ (—Ö–æ—Ç—è –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ services_with_providers), –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if not keyboard:
             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏.")
             return

        reply_markup = InlineKeyboardMarkup(keyboard)
        

        if len(response_text) > 4000 :
            logger.warning(f"Long service list text for /services: {len(response_text)} chars. May be truncated.")

        
        if not services_with_providers:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        await update.message.reply_text("<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>", parse_mode=ParseMode.HTML)

        for service, provider_name_tuple in services_with_providers:
            provider_name = provider_name_tuple
            price_str = f"{service.price:.2f} —Ä—É–±." if service.price is not None and service.price > 0 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            service_details_text = (
                f"<b>–£—Å–ª—É–≥–∞:</b> {service.name}\n"
                f"<i>–û—Ç:</i> {provider_name}\n"
                f"<i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {service.duration_minutes} –º–∏–Ω.\n"
                f"<i>–¶–µ–Ω–∞:</i> {price_str}\n"
            )
            if service.description:
                 service_details_text += f"<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {service.description[:100] + '...' if len(service.description) > 100 else service.description}\n"
            
            service_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    f"üóìÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã", 
                    callback_data=f"view_slots_{service.service_id}"
                )]
            ])
            await update.message.reply_text(service_details_text, reply_markup=service_keyboard, parse_mode=ParseMode.HTML)
        
        logger.info(f"User {user.id if user else 'N/A'} viewed available services. Count: {len(services_with_providers)}")


    except Exception as e:
        logger.error(f"Error in list_available_services for user {user.id if user else 'N/A'}: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        if 'db' in locals() and db: db.close()


async def my_bookings_client(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."""
    user = update.effective_user
    db: Session = next(get_db())

    try:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ (—Å—Ç–∞—Ç—É—Å 'confirmed') –∏ –±—É–¥—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        now = datetime.now()
        client_bookings = db.query(Booking).join(TimeSlot).filter(
            Booking.client_telegram_id == user.id,
            Booking.status == "confirmed", # –¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
            TimeSlot.start_time > now      # –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ
        ).order_by(TimeSlot.start_time).all()

        if not client_bookings:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n"
                "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /services."
            )
            return

        response_text = "<b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        
        for booking in client_bookings:
            slot = booking.slot
            service = slot.service
            provider = service.provider

            response_text += (
                f"<b>ID –ë—Ä–æ–Ω–∏:</b> <code>{booking.booking_id}</code>\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {service.name}\n"
                f"<b>–ú–∞—Å—Ç–µ—Ä/–ö–æ–º–ø–∞–Ω–∏—è:</b> {provider.name}\n"
                f"<b>–í—Ä–µ–º—è:</b> {slot.start_time.strftime('%Y-%m-%d %H:%M')} - {slot.end_time.strftime('%H:%M')}\n"
            )
            keyboard_booking = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å ID: {booking.booking_id}",
                    callback_data=f"cancel_booking_client_{booking.booking_id}"
                )
            ]])
            await update.message.reply_text(response_text, reply_markup=keyboard_booking, parse_mode=ParseMode.HTML)
            response_text = "" # –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∫–∞–∂–¥–æ–µ –±—ã–ª–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π

        logger.info(f"User {user.id} viewed their bookings. Count: {len(client_bookings)}")

    except Exception as e:
        logger.error(f"Error in my_bookings_client for user {user.id}: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        if 'db' in locals() and db: db.close()
